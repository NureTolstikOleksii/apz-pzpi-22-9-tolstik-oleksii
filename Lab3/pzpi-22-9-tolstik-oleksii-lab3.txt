Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з лабораторної роботи №3
з дисципліни "Архітектура програмного забезпечення"
з теми: "Web-застосунок"





Виконав 								Перевірив
ст. гр. ПЗПІ-22-9 							Дашенков Д. С.
Толстік О. В.









2025
1 ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	05.05.2025	0.1	Створено звіт

2 ЗАВДАННЯ

Тема: Web-застосунок
У межах цієї лабораторної роботи необхідно реалізувати front-end частину програмної системи, яка забезпечує веб-доступ для користувачів і адміністраторів через окремі інтерфейси відповідно до ролей. Обидві частини інтерфейсу повинні підтримувати інтернаціоналізацію та локалізацію, зокрема українську й англійську мови, регіональні формати дати й часу, правила сортування тексту та напрями введення. Інтерфейс адміністрування має включати можливості керування користувачами, управління даними, створення резервних копій, а також експорт і імпорт налаштувань та даних системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

3.1 Опис прийнятих інженерних рішень

Під час виконання лабораторної роботи було використано фреймворк React, який дозволяє створювати компонентну структуру інтерфейсу з повторно використовуваними елементами. 
Для маршрутизації сторінок і розмежування прав доступу застосовано React Router, що дало змогу реалізувати окремі маршрути для користувачів і адміністраторів згідно з ролями.
Система інтернаціоналізації побудована з використанням бібліотеки i18next, яка забезпечує підтримку української та англійської мов, адаптацію формату дати, часу, а також сортування та напрям введення тексту.
Для керування станом і обміну даними між компонентами було використано React Context. Також було реалізовано адаптивний дизайн за допомогою CSS-модулів і Flexbox/Grid, щоб забезпечити коректне відображення на різних пристроях. Функціонал резервного копіювання, імпорту й експорту реалізовано через інтеграцію з API, що дозволяє взаємодіяти з backend-сервісом для збереження конфігурацій і даних.

3.2 Опис взаємодії компонентів web-застосунку одне з одним та з іншими елементами системи.
Всі компоненти системи, які розташовані в директорії components, відповідають за побудову інтерфейсних елементів (наприклад, Header, Sidebar, Input, LoaderOverlay) та використовуються на сторінках, що зберігаються в директорії pages. Кожна сторінка (наприклад, PatientsPage, StaffPage, Login, BackupPage тощо) формує окремий розділ інтерфейсу та включає необхідні компоненти для відображення і взаємодії з користувачем.
Навігація між сторінками реалізована у файлі routes.jsx (папка router), де визначено маршрути відповідно до ролі користувача. Для перевірки прав доступу маршрути використовують сервіси з services, зокрема authService.js.
Файли з services відповідають за обробку запитів до Backend API: вони інкапсулюють логіку роботи з певними сутностями, такими як пацієнти (patientService.js), персонал (staffService.js), резервне копіювання (backupService.js) тощо. Усі HTTP-запити виконуються через обгортку api.js з utils, яка забезпечує єдину точку взаємодії з сервером.
Інтернаціоналізація налаштована через i18n.js, що використовується в App.jsx для підключення мовних ресурсів. Локалізовані дані зберігаються в папці locales.
Контекст застосунку налаштований у context, що дозволяє зберігати глобальний стан (наприклад, дані про користувача або мову). Стилі реалізовано як глобальні (styles) або у вигляді CSS-модулів, прив’язаних до окремих сторінок (StatsPage.module.css).
Увесь застосунок ініціалізується з main.jsx, де рендериться App.jsx, який включає маршрутизацію, провайдери контексту та інтернаціоналізацію.

3.3 UML діаграма прецедентів (Use Case Diagram)

 
Рисунок 3.1 – UML діаграма прецедентів







3.4 UML діаграма компонентів (Component Diagram)

 
Рисунок 3.2 – UML діаграма компонентів

3.5 UML діаграма пакетів (Package Diagram)

 
Рисунок 3.3 – UML діаграма пакетів


3.6 UML діаграма діяльності (Activity Diagram); 

 
Рисунок 3.4 – UML діаграма діяльності

4 ВИСНОВКИ

У ході виконання лабораторної роботи було спроєктовано та реалізовано фронтенд-частину веб-застосунку з урахуванням ролей користувачів, багатомовності та функціональної модульності. Розроблена архітектура забезпечує чіткий розподіл компонентів за призначенням, включаючи інтерфейси для лікарів та адміністраторів, а також підтримку інтернаціоналізації, адаптивності та резервного копіювання даних. Створені UML-діаграми дозволили детально описати взаємодію компонентів, логіку роботи та структуру системи, що сприяє кращому розумінню та подальшому супроводу проєкту.
