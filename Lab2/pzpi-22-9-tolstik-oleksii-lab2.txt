Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з лабораторної роботи №2
з дисципліни "Архітектура програмного забезпечення"
з теми: "Мобільний застосунок"





Виконав 								Перевірив
ст. гр. ПЗПІ-22-9 							Дашенков Д. С.
Толстік О. В.









2025
1 ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	20.05.2025	0.1	Створено звіт

2 ЗАВДАННЯ

Тема: Мобільний застосунок
На цій лабораторній роботі потрібно розробити мобільний програмний застосунок для будь-якої поширеної на сьогодні мобільної платформи. Мобільний застосунок повинен бути частиною системи і повинен взаємодіяти з нею. Для реалізації програмного застосунку можна використовувати технології для реалізації програмного забезпечення для мобільних платформ, вказані лектором, а саме Kotlin для Android та Swift для iOS.

3 ОПИС ВИКОНАНОЇ РОБОТИ

3.1 Опис прийнятих інженерних рішень

Під час розробки мобільного застосунку HealthyHelper було прийнято низку технічних та архітектурних рішень, що забезпечили стабільну роботу, модульність та зручність масштабування системи.
1. Вибір мови Kotlin
Для розробки застосунку було використано мову Kotlin, оскільки вона є офіційною мовою для Android-розробки, підтримується Google, має лаконічний та безпечний синтаксис, а також повністю сумісна з Java. Це дозволяє створювати зрозумілий, чистий і менш помилковий код.
2. Фрагментна структура застосунку
Інтерфейс мого застосунку реалізовано за допомогою фрагментів, що дозволяє розділити логіку на окремі модулі, такі як: HomeFragment, LoginFragment, ProfileFragment, TreatmentFragment, тощо.
Для мед. сестри реалізовано окрему вкладку HomeStaffFragment із відповідною логікою.Таке рішення забезпечує гнучкість навігації, легкість підтримки та повторне використання інтерфейсів.
3. Зв’язок із бекендом через Retrofit
Для комунікації з серверною частиною, реалізованою на Node.js, було використано бібліотеку Retrofit – сучасний стандарт для HTTP-запитів в Android. Вона дозволяє просто створювати API-інтерфейси, обробляти відповіді, реалізовувати асинхронність та автоматично працювати з JSON.
4. Поділ на шари
В архітектурі дотримано принципу розділення відповідальностей:
- всі мережеві запити знаходяться в network;
- інтерфейс – у layout;
- логіка заповнення UI – у відповідних фрагментах.
Це спрощує тестування, повторне використання коду та підтримку застосунку.
5. Підключення до backend через REST API
Було реалізовано десятки запитів до бекенду для:
-	авторизації користувача;
-	отримання даних пацієнтів, призначень, контейнерів;
-	оновлення профілю;
-	генерації статистики та звітів;-
-	відправлення та отримання повідомлень.
Також було використано діалогові вікна (DialogFragment) для зміни пароля, вибору контейнера, додавання медикаменту та кастомні шрифти (font/Montserrat) для стилізації інтерфейсу.
6. Безпека
Авторизація здійснюється через JWT-токен. Валідація введених даних: email та пароль проходять перевірку перед відправкою на сервер. Зберігання токена реалізовано безпечним способом на сервері.
7. Масштабованість
Структура проєкту спроєктована з урахуванням подальшого розширення – додавання нових фрагментів, API-модулів, підтримки інших ролей користувачів.
У підсумку, прийняті інженерні рішення забезпечили чітку архітектуру, високу продуктивність і зручність розробки, що дозволяє надалі легко підтримувати й розвивати мобільний застосунок HealthyHelper.

3.2 Опис взаємодії компонентів  мобільного застосунку одне з одним та з іншими елементами системи.

Мобільний застосунок HealthyHelper побудований на модульній архітектурі, де кожен фрагмент виконує окрему логічну функцію, а взаємодія між компонентами реалізована через навігацію, спільні представлення або прямі виклики методів API. Застосунок активно взаємодіє з бекендом, створеним на Node.js, через REST API та використовує бібліотеку Retrofit для обміну даними.
Взаємодія між компонентами застосунку:
- MainActivity є головною оболонкою, в якій відображаються всі фрагменти;
- фрагменти (LoginFragment, ProfileFragment, TreatmentFragment тощо) не взаємодіють напряму один з одним, а переходять через навігаційні дії (Navigation Graf);
- DialogFragment-и відкриваються з відповідних основних фрагментів для введення або зміни даних користувача;
- SharedPreferences або Bundle використовуються для передачі ключових даних (наприклад, userId, containerId) між екранами.
Взаємодія з backend-сервером:
- для обміну даними використовується Retrofit + Kotlin Coroutines;
- усі запити до API описані у відповідних інтерфейсах (PatientsApi, ContainerApi, ProfileApi, NotificationApi) у пакеті network;
- дані, що надходять із сервера, мапляться у відповідні моделі (Response класи), які потім використовуються в адаптерах, UI або логіці фрагментів;
- всі запити до сервера – асинхронні, що дозволяє не блокувати UI при отриманні інформації.
Взаємодія з IoT-пристроєм:
- мобільний застосунок керує станом контейнера через сервер;
- надсилає команди (наприклад, заповнити або очистити відсік);
- отримує дані про статус з’єднання, активність, заповненість відсіків;
- IoT-пристрій періодично надсилає дані назад у систему (наприклад, коли відсік було відкрито або якщо доза пропущена) – ці події відображаються в мобільному застосунку у вигляді сповіщень або змін у статусі.
При зміні фото профілю, зображення надсилається на Cloudinary через бекенд, а URL зберігається й використовується для відображення в застосунку.
Таким чином, мобільний застосунок HealthyHelper реалізує чітку та структуровану взаємодію між внутрішніми компонентами і серверною частиною.

3.3 UML діаграма прецедентів (Use Case Diagram)

 
Рисунок 3.1 – UML діаграма прецедентів

3.4 UML діаграма компонентів (Component Diagram)

 
Рисунок 3.2 – UML діаграма компонентів
3.5 ER-модель даних (Entity–Relationship Model) мобільної платформи.

 
Рисунок 3.3 –ER-діаграма даних

3.6 UML діаграма діяльності (Activity Diagram); 

 
Рисунок 3.4 – UML діаграма діяльності

4 ВИСНОВКИ

У ході виконання лабораторної роботи було розроблено повноцінний мобільний застосунок HealthyHelper мовою Kotlin для платформи Android. Застосунок реалізує функціонал авторизації користувачів, відображення профілю, перегляду призначень, керування контейнерами для ліків та роботи з повідомленнями. Було прийнято низку інженерних рішень, зокрема використано архітектуру на основі фрагментів, бібліотеку Retrofit для взаємодії з сервером, а також реалізовано рольову систему доступу. Забезпечено асинхронну взаємодію з backend-частиною, що побудована на Node.js та працює з базою даних PostgreSQL через Prisma ORM. Крім того, мобільна частина підтримує інтеграцію з хмарним сховищем (Cloudinary) для роботи з фотографіями та взаємодіє з віртуальним IoT-пристроєм на базі Arduino. Структура проєкту є масштабованою, логічно поділеною на компоненти та відповідає вимогам сучасної клієнт-серверної медичної системи.
Посилання на GitHub: https://github.com/NureTolstikOleksii/apz-pzpi-22-9-tolstik-oleksii/tree/main/Lab2
