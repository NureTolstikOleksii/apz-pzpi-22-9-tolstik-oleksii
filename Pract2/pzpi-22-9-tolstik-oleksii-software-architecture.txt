Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з практичної роботи №2
з дисципліни "Архітектура програмного забезпечення"
з теми: "Архітектура відомих програмних систем"





Виконав 								Перевірив
ст. гр. ПЗПІ-22-9 							ст. викладач кафедри ПІ
Толстік О. В.							Сокорчук Ігор Петрович









2025
1 ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	25.03.2025	0.1	Створено титульну сторінку звіту, розділи 1, 2, 3, 4, 
додатки A, Б, В
2			

2 ЗАВДАННЯ

У процесі виконання практичного завдання необхідно підготувати доповідь на тему "Архітектура однієї з відомих програмних систем". В процесі виконання необхідно створити та оформити слайди презентації доповіді, а також записати відео з виступом і опублікувати його на платформі YouTube. Потрібно оформити звіт про виконану роботу та завантажити на dl.nure.ua. Після чого сформувати звіт у форматі текстового файлу, а також файл з прикладами програмного коду та завантажити його в відповідну директорію GitHub-репозиторію.
3 ОПИС ВИКОНАНОЇ РОБОТИ

У процесі виконання практичного завдання було підготовлено доповідь на тему "Архітектура програмної системи Facebook". Окрему увагу приділено теоретичному аналізу архітектурних стилів, використаних у побудові Facebook, а також розгляду основних технологій зберігання даних, масштабування інфраструктури, безпеки та особливостей інтеграції.
Для доповіді було створено слайди презентації (див. дод. Б), які візуально демонструють архітектурні підходи, компоненти системи та принципи їх взаємодії. Структура доповіді охоплює такі розділи:
1) Вступ;
2) Facebook як програмна система;
3) Архітектурні стилі Facebook;
4) Основні компоненти та технології;
5) Зберігання та обробка даних;
6) Безпека даних;
7) Інтеграції та деплоймент;
8) Масштабування і продуктивність;
9) Інфраструктура програмної системи;
10) Висновок.
На основі підготовленої презентації було створено відеодоповідь, у якій послідовно викладено ключові аспекти архітектури Facebook та зроблено висновки щодо її ефективності та стійкості (див. дод. А).
4 ВИСНОВКИ

У ході виконання роботи було здобуто практичні навички аналізу архітектури великомасштабних програмних систем. Отримано глибше розуміння принципів побудови складних інформаційних платформ, зокрема застосування мікросервісної, сервіс-орієнтованої, клієнт-серверної, подієво-орієнтованої та розподіленої архітектур. Проаналізовано способи організації зберігання та обробки даних, забезпечення безпеки, масштабування системи й побудови стійкої інфраструктури, що дозволяють Facebook ефективно функціонувати на глобальному рівні.
ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/zeLiRxdLRZQ

Хронологічний опис доповіді:
00:00 Вступ. Представлення теми доповіді та загальний вступ до доповіді.
00:18 Зміст доповіді. Короткий огляд структури презентації: які розділи буде розглянуто та що очікувати від доповіді.
00:47 Facebook як програмна система. Опис масштабів, функцій та особливостей Facebook як платформи, яка обслуговує мільярди користувачів.
01:37 Архітектурні стилі Facebook. Розбір усіх архітектурних підходів: мікросервісна архітектура, SOA, клієнт-серверна модель тощо.
04:20 Основні компоненти та технології. Огляд ключових складових: фронтенд на React.js тощо.
04:54 Зберігання та обробка даних. Детальний опис систем для зберігання даних.
06:02 Безпека даних. Висвітлення заходів щодо шифрування даних, контролю доступу, автентифікації користувачів та виявлення загроз.
06:33 Інтеграції та деплоймент. Опис процесів CI/CD, використання Phabricator для керування кодом, тестування оновлень і застосування канарейкових релізів.
07:05 Масштабування і продуктивність. Пояснення як Facebook підтримує високу продуктивність.
07:34 Інфраструктура програмної системи. Розгляд власних дата-центрів Facebook, використання FBOSS та участь в Open Compute Project для оптимізації інфраструктури.
08:09 Висновок. Узагальнення особливостей архітектури Facebook, висвітлення її масштабованості, стійкості та інженерної елегантності.
08:40 Список використаних джерел. Перелік літератури, що були використані для підготовки доповіді.
ДОДАТОК Б
Cлайди презентації доповіді

 
Рисунок Б.1 –Титульний слайд презентації

 
Рисунок Б.2 – Слайд зі змістом презентації

 
Рисунок Б.3 – Слайд з описом програмної системи Facebook

 
Рисунок Б.4 – Слайд з описом використовуваних архітектурних стилів




 
Рисунок Б.5 – Слайд з основними компонентами програмної системи

 
Рисунок Б.6 – Слайд з описом технологій зберігання та обробки даних




 
Рисунок Б.7 – Слайд з описом забезпечення безпеки Facebook

 
Рисунок Б.8 – Слайд з описом процесу розробки та оновлення Facebook




 
Рисунок Б.9 – Слайд з описом технологій масштабування

 
Рисунок Б.10 – Слайд з описом інфраструктури

 
Рисунок Б.11 – Слайд з висновком до доповіді

 
Рисунок Б.12 – Слайд з описом використаних джерел
ДОДАТОК В
Приклади програмного коду

Приклад GraphQL-запиту:
1  query {
2    user(id: "123") {
3      name
4      profilePicture {
5        url
6      }
7      friends {
8        name
9      }
10    }
11  }

Приклад події у Kafka:
1  {
2    "event": "NewPostCreated",
3    "timestamp": "2024-06-25T12:34:56Z",
4    "data": {
5      "postId": "abc123",
6      "authorId": "user456",
7      "content": "Hello, world!"
8    }
9  }

Приклад кешування через Memcached:
1  import memcache
2  
3  # Підключення до Memcached сервера
4  mc = memcache.Client(['127.0.0.1:11211'])
5  
6  # Запис даних у кеш
7  mc.set('user_123_profile', {'name': 'John', 'age': 30})
8  
9  # Отримання даних із кешу
10  profile = mc.get('user_123_profile')
11  print(profile)

Приклад шардінгу базі даних:
1  User IDs 0-9999  -> Shard 1 (Server 1)
2  User IDs 10000-19999 -> Shard 2 (Server 2)
3  User IDs 20000-29999 -> Shard 3 (Server 3)

